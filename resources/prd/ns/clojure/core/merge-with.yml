added: '1.0'
ns: clojure.core
name: merge-with
file: clojure/core.clj
static: true
column: 1
line: 3075
arglists:
- [f, '&', maps]
doc: |-
  Returns a map that consists of the rest of the maps conj-ed onto
    the first.  If a key occurs in more than one map, the mapping(s)
    from the latter (left-to-right) will be combined with the mapping in
    the result by calling (f val-in-result val-in-latter).

c/category: collection
c/source: |
  (when (some identity maps)
    (let [merge-entry (fn [m e]
            (let [k (key e) v (val e)]
              (if (contains? m k)
                (assoc m k (f (get m k) v))
                (assoc m k v))))
          merge2 (fn [m1 m2]
           (reduce1 merge-entry (or m1 {}) (seq m2)))]
      (reduce1 merge2 maps)))
c/impl: |
  (defn c-merge-with [t & m]
    (let [w (fn [r [k v]] (assoc r k (cond->> v (contains? r k) (t (get r k)))))
          u (fn [m1 m2] (reduce w m1 m2))]
      (reduce u {} m)))
c/fn-notation-env: 'align*'
c/fn-notation: |
  f(t, \&m) &= \text{reduce}(u, \text{\{\}}, m) \\
  u &\leftarrow f(m_1, m_2) = \text{reduce}(w, m_1, m_2) \\
  w &\leftarrow f(m, [k, v]) = \text{assoc}(m, k, v') \\
    &\quad\text{where}\quad v' =
    \begin{cases}
     t(\text{get}(m, k), v) & \text{if contains?($m$, $k$)} \\
     v & \text{otherwise}
    \end{cases} \\
