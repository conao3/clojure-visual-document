added: '1.0'
ns: clojure.core
name: deref
file: clojure/core.clj
static: true
column: 1
line: 2323
arglists:
- [ref]
- [ref, timeout-ms, timeout-val]
doc: |-
  Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,
    returns the in-transaction-value of ref, else returns the
    most-recently-committed value of ref. When applied to a var, agent
    or atom, returns its current state. When applied to a delay, forces
    it if not already forced. When applied to a future, will block if
    computation not complete. When applied to a promise, will block
    until a value is delivered.  The variant taking a timeout can be
    used for blocking references (futures and promises), and will return
    timeout-val if the timeout (in milliseconds) is reached before a
    value is available. See also - realized?.
