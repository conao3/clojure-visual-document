added: '1.0'
ns: clojure.core
name: for
file: clojure/core.clj
column: 1
line: 4673
macro: true
arglists:
- [seq-exprs, body-expr]
doc: |-
  List comprehension. Takes a vector of one or more
     binding-form/collection-expr pairs, each followed by zero or more
     modifiers, and yields a lazy sequence of evaluations of expr.
     Collections are iterated in a nested fashion, rightmost fastest,
     and nested coll-exprs can refer to bindings created in prior
     binding-forms.  Supported modifiers are: :let [binding-form expr ...],
     :while test, :when test.

    (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))

c/category: collection
c/source: null
c/fn-notation: null
